{"ast":null,"code":"export async function register(userData) {\n  const response = await fetch(\"http://localhost:5000/api/signup\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error(\"Registration failed\");\n  }\n  return response.json();\n}\nexport async function fetchWithAuth(url, options = {}) {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"No token found\");\n  }\n  console.log(token);\n  console.log(options);\n  try {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 401) {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      if (!refreshToken) {\n        throw new Error(\"No refresh token found\");\n      }\n      const refreshRespone = await fetch(\"/auth/refresh\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: refreshToken\n        })\n      });\n      if (!refreshRespone.ok) {\n        throw new Error(`HTTP error! status: ${refreshRespone.status}`);\n      }\n      const refreshData = await refreshRespone.json();\n      token = refreshData.token;\n      localStorage.setItem(\"token\", token);\n      response = await fetch(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Fertch Error', error);\n    throw error;\n  }\n}\n/*export async function login(credentials) {\n  const response = await fetch(\"http://localhost:5000/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(credentials),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Login failed\");\n  }\n\n  return response.json();\n}*/\nexport async function login(credentials) {\n  // Fetch all users\n  const response = await fetch(\"http://localhost:5000/users\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch users\");\n  }\n  const users = await response.json();\n  console.log(users);\n  console.log(\"--------------\");\n  console.log(credentials);\n  // Compare credentials\n  const user = users.find(user => user.email === credentials.email && user.password === credentials.password);\n  if (user) {\n    // Return mock token if credentials match\n    return {\n      token: \"mock-jwt-token\"\n    };\n  } else {\n    throw new Error(\"Invalid credentials\");\n  }\n}","map":{"version":3,"names":["register","userData","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","fetchWithAuth","url","options","token","localStorage","getItem","console","log","Authorization","status","refreshToken","refreshRespone","refreshData","setItem","error","login","credentials","users","user","find","email","password"],"sources":["/root/alx/EgyExpress/frontend/src/http.js"],"sourcesContent":["export async function register(userData) {\n  const response = await fetch(\"http://localhost:5000/api/signup\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(userData),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Registration failed\");\n  }\n\n  return response.json();\n}\n\nexport async function fetchWithAuth(url, options = {}) {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"No token found\");\n  }\n  console.log(token);\n  console.log(options);\ntry {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if(response.status === 401){\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      throw new Error(\"No refresh token found\");\n    }\n    const refreshRespone = await fetch(\"/auth/refresh\",\n      {\n       method:\"POST\",\n       headers:{\n        \"Content-Type\":\"application/json\",\n       },\n       body:JSON.stringify({token: refreshToken}),\n       } );\n    if (!refreshRespone.ok) {\n       throw new Error(`HTTP error! status: ${refreshRespone.status}`);\n      }\n      const refreshData = await refreshRespone.json();\n      token = refreshData.token;\n      localStorage.setItem(\"token\", token);\n      response = await fetch(url,{\n        ...options,\n        headers:{\n          ...options.headers,\n          Authorization: `Bearer ${token}`,\n        },\n      });\n  }\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return await response.json();\n} catch (error) {\n  console.error('Fertch Error', error);\n  throw error;\n}\n}\n/*export async function login(credentials) {\n  const response = await fetch(\"http://localhost:5000/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(credentials),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Login failed\");\n  }\n\n  return response.json();\n}*/\nexport async function login(credentials) {\n  // Fetch all users\n  const response = await fetch(\"http://localhost:5000/users\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch users\");\n  }\n\n  const users = await response.json();\nconsole.log(users);\nconsole.log(\"--------------\");\nconsole.log(credentials);\n  // Compare credentials\n  const user = users.find(\n    (user) =>\n      user.email === credentials.email && user.password === credentials.password\n  );\n\n  if (user) {\n    // Return mock token if credentials match\n    return { token: \"mock-jwt-token\" };\n    \n  } else {\n    throw new Error(\"Invalid credentials\");\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}